
================================
python:
>> Given an array, find the minimum and maximum values.
    ans. builtin mtds, sorting, python code
>> Given a string, count the char occurrences of word in a dictionary:
    Input: 'aaabbbccddeeeee'
    Output: { “a” : 3 , “b” : 3, “c” : 2, “d” : 2 , “e” : 5 }
>> Write a Python script to count the frequency of characters in a text file.
>> Write a Python program to count the frequency of an word in a text file.
>> Reversing a String using an Extended Slicing techniques. builtin / slicing / code
>> Count Vowels from Given words .
>> Find the highest occurrences of each word from string and sort them in order.
>> Remove Duplicates from List.
>> Sort a List without using Sort keyword.
>> Find the pair of numbers in this list whose sum is n no.
>> Find the max and min no in the list without using inbuilt functions.
>> Read and print values from an Excel file using Pandas.
    df = pd.read_excel('your_file.xlsx')
>> Handle file exceptions (missing or corrupted Excel files) gracefully.
>> Calculate the Intersection of Two Lists without using Built-in Functions

>> What is a docstring in Python?
    special kind of comment used to document what a function, class, or module does. 
    appears right after the definition of a function, method, class, or module. 
    Docstrings are enclosed in triple quotes (""" or ''') and can span multiple lines.
>> What is pass in Python? When is it used?
    Placeholder for future class/function/loop definition
    It does nothing when executed 
>> Which data structure occupies more memory: list or tuple? Why?
    In Python, lists generally occupy more memory than tuples. 
    This is because lists are mutable, meaning their size and contents can change, while tuples are immutable, meaning their size and contents are fixed once created.


Write a Python script to create a palindrome with a given number of alphabets.
    Example: For n=3 (alphabets: a, b, c) → Palindrome: abcba
>> Write Python code to make API requests to a public API (e.g., weather API) and process the JSON response.
>> Implement a function to fetch data from a database table, perform data manipulation, and update the database.

===============================================================================================================
pyspark QA:

>> What is the difference between cache() and persist() in PySpark?
   cache(): Default Storage Level: cache() uses the default storage level, which is MEMORY_ONLY. 
   persist(): Flexible Storage Levels: persist() allows you to specify different storage levels, such as MEMORY_ONLY, MEMORY_AND_DISK, DISK_ONLY, etc.
>> How does Lazy Evaluation work in PySpark?
   the execution of transformations on RDDs (Resilient Distributed Datasets) or DataFrames is deferred until an action is performed. This allows PySpark to optimize the 
   execution plan and improve performance.
>> What are wide and narrow transformations in PySpark?
   Narrow transformations are those where each input partition contributes to only one output partition. Examples include: map() / filter() / flatMap()
   Wide transformations involve shuffling data across the network, as input partitions contribute to multiple output partitions. 
   groupByKey(): Groups elements with the same key. / reduceByKey(): Combines values with the same key using a specified function. /join(): Joins two datasets 
5. Explain shuffle operations in PySpark and their impact on performance.
>> What are the different persistence levels available in PySpark?
>> How does PySpark handle schema evolution in DataFrames?
>> What is broadcast join, and when should we use it?
>> Explain the difference between groupBy() and reduceByKey() in PySpark.
>> What is the use of explode() function in PySpark?

>> Key Differences
   Memory Management: On-heap memory (data in deserilization -ready for eat) is managed by the JVM and subject to GC, while off-heap memory (data in serilization form - raw format) is managed outside the JVM and not subject to GC.
   Performance: Off-heap memory can reduce GC overhead and improve performance for large datasets, but may introduce serialization/deserialization overhead12.

>> Find the top 3 highest-paid employees from each department.
   data = [(1, "Amit", "IT", 90000),

12. Write a PySpark query to count the number of null values in each column of a DataFrame.

>> Write a PySpark code to remove duplicate records based on a specific column.
   data = [(101, "Mumbai", "Maharashtra"), ]

14. Write a PySpark query to replace null values in a specific column with the previous non-null value.

>> Write a PySpark query to calculate the moving average of sales over the last 3 months.
    window_spec = Window.orderBy("Month").rowsBetween(-2, 0)
    df_with_moving_avg = df.withColumn("Moving_Avg", avg(col("Sales")).over(window_spec))

>> What is PySpark (python api let u use spark with python), and how is it different from Apache Spark (big data engine).
>> How do you initialize a SparkSession in PySpark?
>> How do you perform basic operations on DataFrames in PySpark?
>> What is SparkSQL, and how do you perform SQL operations on DataFrames?
   Registering the DataFrame as a Temporary View: df.createOrReplaceTempView("people")
   Running SQL Queries: spark.sql("SELECT Name, Age FROM people WHERE Age > 30").show()
>> How do you read and write data in different formats (CSV, JSON, Parquet) using PySpark?
>> What is lazy evaluation in PySpark, and why is it important?
>> Explain the role of caching and persistence in PySpark.
>> Given a DataFrame, split the data into two columns (Even, Odd) where:
    Ans. df2 = df1.withColumn('even', when(col('id') % 2 == 0, col('id'))).withColumn('odd', when(col('id')%2!=0, col('id')))
>> Read a CSV file and create a DataFrame with properties.
>> Create a DataFrame with two columns:
    Column 1: Default String
    Column 2: Default Integer
>> Explain the key differences between Apache Spark's DataFrame and RDD APIs. In which scenarios would you prefer one over the other?
    esay of use, performance, schema
>> Describe the concept of lazy evaluation in PySpark. How does it impact the execution of Spark jobs?
    Lazy evaluation allows Spark to optimize the execution plan.
>> What is the difference between RDD, DataFrame, and Dataset (best of rdd & df) ? 3 api to intract with spark for developers
    similarities in 3 apis : foult tolerant, distributed, in-memory computation, immutable, lazy evaluation, internally processing as rdd for all 3 codes
    RDD: low-level api / no optimizer / oops style api / complie time error (strong type safety) / 4 lang / no schema /
    DF: high-level api / catalyst optimizer / sql style api (user friendly) / run time error (less type safety) / 4 lang / schema structured /
    DS: high-level api / optimizer (best plan execution)/ oops / complie time error (strong type safety) / 2 lang / schema structured / 
>> What is the difference between map() and flatMap() inPySpark?
    map() when you want to apply a function that returns a single value for each input element
    flatMap() when the function can return multiple values for each input element
>> How do you handle missing values in PySpark?
    select(): Use when you need to select columns without transformations.
    selectExpr(): Use when you need to apply SQL expressions or transformations while selecting columns.
>> What are transformations and actions in PySpark? Giveexamples.

>> df1 = df.select('name', explode(split(df.language, ',')))
>> df1 = df.withColumn('nc', coalesce(when(df.city1=="", None).otherwise(df.city1), when(df.city2=="", None).otherwise(df.city2), 
         when(df.city3=="", None).otherwise(df.city3)))


3. What are broadcast variables in PySpark, and how do they optimize join operations? Provide an example scenario where a broadcast join would be beneficial.

5. How does PySpark handle data skew, and what strategies can be employed to mitigate its effects in a large dataset?

6. Explain the role of the Catalyst optimizer in PySpark. How does it improve the performance of Spark SQL queries?

>> What is the significance of partitioning in PySpark, and how does it affect the performance of data processing tasks?

>> How would you implement window functions in PySpark to calculate a moving average over a specific time window?

10. Explain the concept of checkpointing in PySpark. Why is it important in streaming applications?

>> Given a dataset of Indian cities with their respective populations, write a PySpark code snippet to find the top 5 most populous cities.
     +-------------+----------+
     | City    | Population|
     +-------------+----------+
    top_5_cities = df.orderBy(col("Population").desc()).limit(5)
>> Given a DataFrame containing employee details, write a PySpark code snippet to group employees by their department and calculate the average salary for each department.
    avg_salary_by_dept = df.groupBy("Department").agg(avg("Salary").alias("AverageSalary"))

>> Write a PySpark code snippet to remove duplicate records from a DataFrame based on a composite key consisting of 'customer_id' and 'transaction_date'.
     +------------+----------------+-------------------+
     | customer_id| transaction_id | transaction_date |
     +------------+----------------+-------------------+
    df_no_duplicates = df.dropDuplicates(["customer_id", "transaction_date"])




2️⃣ How does .𝐜𝐨𝐥𝐥𝐞𝐜𝐭() work, and when should it be avoided?
3️⃣ Explain .countByKey() with an example.
4️⃣ What are some use cases for .take() and .takeOrdered()?
5️⃣ How does .saveAsTextFile() handle data partitioning during output?
6️⃣ What is the role of .foreach() in Spark?
7️⃣ What is the difference between .countByValue() and .countByKey()


>> What is the difference between createOrReplaceTempView and createGlobalTempView in DataFrames?
   Scope:
   createOrReplaceTempView creates a view local to the SparkSession.
   createGlobalTempView creates a view accessible across all SparkSessions within the same application.
   Lifetime:
   createOrReplaceTempView views are dropped when the SparkSession ends.
   createGlobalTempView views persist until the Spark application terminates.
18)Explain the integration of DataFrames with Spark SQL.
19)How do you optimize DataFrame operations for better performance?
20)Can you explain the difference between DataFrame.cache() and DataFrame.persist()?


26)xplain the concept of Encoders in Spark Datasets.

>> How to set the partitions in pyspark?
   Reading Data: The option("numPartitions", 10) sets the number of partitions when loading the data.
   repartition Method: This method increases or decreases the number of partitions and shuffles the data.
   df1 = df.repartition(3)
   print(f"Number of partitions  repartitioning: {df1.rdd.getNumPartitions()}")
   coalesce Method: This method reduces the number of partitions without a full shuffle, which is more efficient for reducing partitions.
   df_coalesced = df.coalesce(2)
   print(f"Number of partitions after coalescing: {df_coalesced.rdd.getNumPartitions()}")

>> Default file format in Spark (is Parquet), Why Parquet?
      Efficient Storage: Columnar format allows for better compression and encoding.
      Performance: Optimized for query performance, especially for read-heavy operations.
      Compatibility: Widely supported across various big data tools and frameworks.

>> what are the optimization techniques in pyspark?
1. Use DataFrame/Dataset over RDD
DataFrames and Datasets are optimized for performance and provide a higher-level API compared to RDDs. They leverage Spark's Catalyst optimizer and Tungsten execution engine for efficient query planning and execution12.
2. Avoid User Defined Functions (UDFs)
UDFs can be a performance bottleneck because they are not optimized by Spark's Catalyst optimizer. Instead, use built-in functions whenever possible2.
3. Optimize Partitions
Repartition: Use repartition() to increase the number of partitions for better parallelism.
Coalesce: Use coalesce() to reduce the number of partitions without a full shuffle, which is more efficient12.
4. Cache Data
Caching intermediate DataFrames can save time on repeated computations. Use df.cache() to store DataFrames in memory2.
5. Optimize Joins
Broadcast Joins: Use broadcast() for small DataFrames to avoid shuffling large datasets.
Sort-Merge Joins: Ensure data is partitioned and sorted on join keys to optimize join operations1.
6. Use Efficient Serialization Formats
Kryo Serialization: Use Kryo serialization for faster and more compact serialization compared to Java serialization3.
7. Reduce Shuffle Operations
Minimize expensive shuffle operations by optimizing data partitioning and using operations like mapPartitions() instead of map()1.
8. Disable DEBUG and INFO Logging
Reduce logging overhead by setting the log level to WARN or ERROR in production environments2.

>> what is Repartiton and coalesce?

>> How to submit the spark job?

>> When do we need to do the repartition?
   Data Skew / Increasing Parallelism / Optimizing Joins / Writing to Disk: 

2. Word count program in pyspark

>> Difference between sortby and orderby?
   sortBy is used with RDDs.
   orderBy is used with DataFrames.

>> what is map and flatmap?

>> what is the default block size (128 MB) in hdfs and how to change it?
   Edit the hdfs-site.xml File:
   <property>
       <name>dfs.blocksize</name>
       <value>268435456</value> <!-- 256 MB in bytes -->
   </property>

>> what is data skewness and salting technique?
   df.repartition(10)
   df.rdd.getNumPartitions()
   df.select(spark_partition_id().alias("partid")).groupBy("partid").count()

>> Explain about out of memory issue in spark?
   Causes of Out of Memory Issues: 
   Driver Memory:
   Collect Operations: Using collect() to gather large datasets to the driver can cause memory overflow. The driver tries to merge all results into a single object, which      might be too large to fit into the driver's memory1.
   Large Broadcast Variables: Broadcasting large variables can consume significant memory on the driver.
   Executor Memory:
   Task Execution: Executors run tasks and store intermediate data. If the tasks require more memory than allocated, it can lead to out of memory errors1.
   Shuffling Data: During operations like groupBy or join, data shuffling can cause memory issues if the data size exceeds the executor's memory capacity2.
   Solutions to Out of Memory Issues
   Increase Driver Memory: Adjust the driver memory settings using spark.driver.memory to allocate more memory to the driver2.
   Limit Result Size: Use spark.driver.maxResultSize to limit the size of results collected to the driver1.
   Increase Executor Memory: Configure executor memory using spark.executor.memory to allocate sufficient memory for task execution2.
   Memory Overhead: Set spark.executor.memoryOverhead to account for additional memory required for JVM overhead3.
   Repartition Data: Repartition large datasets to reduce the size of data processed by each executor1.

>> What is difference between spark session and spark context?

>> what is collect list and collect set and when do we use it?
   result = df.groupBy("name").agg(collect_list("value").alias("values_list")) - allows duplicates in list
   result = df.groupBy("name").agg(collect_set("value").alias("values_set")) - no duplicates in list

>> input = [(1,"Sagar-Prajapati"),(2,"Alex-John"),(3,"John Cena"),(4,"Kim Joe")]
    output 
   +---+---------------+----------+---------+
   | ID| Name|First_Name|Last_Name|
   +---+---------------+----------+---------+
   | 1|Sagar-Prajapati| Sagar|Prajapati|
   | 2| Alex-John| Alex| John|
   | 3| John Cena| John| Cena|
   | 4| Kim Joe| Kim| Joe|
   +---+---------------+----------+---------+

====================================================================================
SQL QA:
>> Given two tables, find the count of records for Left Outer Join and Inner Join:
Table A: Table B:
1 1
1 1
1 1 
1 
Ans. 12 & 12
>> Give the output for DENSE_RANK() and RANK() functions for the below dataset:
Nums 
85 
85 
80 
75 
75 
70

>> Given a table with column 'Country', select data in the below sequence:
Table: Matches
Country 
India 
Australia 
Pakistan 
Output:
India vs Australia 
India vs Pakistan 
Australia vs Pakistan
Ans. 
    SELECT a.countryc || ' vs ' || b.countryc as country
    FROM
      `powerful-layout-445408-p5.sur_test_ds.countryt` a
    join
      `powerful-layout-445408-p5.sur_test_ds.countryt` b
    on a.countryc > b.countryc;  -----> or <
>> Given two tables, output the result of INNER, LEFT, RIGHT, FULL JOINS.
Table1:
col1 
---- 
1 
1 
Table2:
---- 
b 
a 
1 
>> Find the 777th highest salary from a table.
🔹 Identify customers who placed orders in consecutive months.
🔹 Query to get the total number of patients per doctor, including unassigned patients.
>> Handling NULL values in employee salary using the average salary.
    IFNULL(expression, replacement_value) -->> It takes two arguments. If the first argument is NULL, it returns the second argument.
    COALESCE(expression1, expression2, ..., expressionN) -->> It can take multiple arguments. It returns the first non-NULL argument from the list.
>> Difference between Subquery and Materialized Views.
    Performance: Materialized views can improve query performance by storing precomputed results, while subqueries are recalculated each time the main query runs.
    Storage: Materialized views consume storage space to store the precomputed results, whereas subqueries do not.
    Maintenance: Materialized views need to be refreshed to stay up-to-date with the underlying data, while subqueries always reflect the current state of the data.
>> CTE vs Subquery in SQL and their performance impact.
    Readability and Maintainability:
    Optimization: Subquery Treated similarly to CTEs in terms of optimization. The query optimizer will attempt to optimize the entire query, including the subqueries.
    Reusability:
🔹 Steps to debug a slow SQL query.





===============================================================================================
others:

✅ Tell me about yourself, your projects, and the tech stack you have used.
✅ What does your day-to-day work look like?
✅ Why are you using the tech stack you are using?
✅ What is an alternative to Medallion Architecture?
✅ What is the kind and size of data you deal with on a daily basis?
✅ If the business is using JSON as a file format, how would you convince them to use Parquet instead?
✅ Tell me about yourself, projects, and tech stack.
✅ Explain the Spark architecture.
✅ Explain how jobs run in Spark.
✅ Follow-up: What does the Catalyst Optimizer do?
✅ Difference between Logical Plan and Physical Plan.
✅ ORC vs. Parquet – What’s the difference?
𝐑𝐨𝐮𝐧𝐝 𝟑 – 𝐇𝐢𝐫𝐢𝐧𝐠 𝐌𝐚𝐧𝐚𝐠𝐞𝐫 𝐃𝐢𝐬𝐜𝐮𝐬𝐬𝐢𝐨𝐧
✅Difference between Data Lake and Delta Lake.
✅ Why did you quit your previous job?
✅ Even though you have an offer in hand, why did you apply again?
✅ If we offer you the same salary as your current offer, will you accept it?
✅ You are settled in Hyderabad; why are you willing to relocate to Bangalore?
