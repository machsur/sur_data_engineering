=============================================================================
Python:
>> Interpreter: The programme that runs your code.
   Virtual Environment: A separate "workspace" that uses a Python interpreter but has its own packages and dependencies.
>> pip - tool for install python packages
   pypi - centralized repository for py packages
>> terminate the python programme  ---> sys.exit()
   execute the file using the specified program or interpreter (#!/usr/bin/python3.5)


>> logging
>> Hiding Passwords and Secret Keys in Environment Variables (linux/mac/Windows) and access them into code -------> os.environ.get("key")

>> with open('sur.log', 'r') as file:
>> Types of Config Files, requests module, unique identifiers (UUIDs)
>> Modules (py file) vs package (collection of modules)
>> Handlling errors: compile time error: Syntatical - missing /Logical error: wrong output 2+3 = 7 /run time error:  5/0.
>>  break / continue / pass

>> 
    functions: reuse block of code / 
    	positional / keyworded / variable length: def sum(a, *b): / keyword variable length: def person(name, **data)
    	Global variable (outside fun) / local variable (inside fun)
    recursion: function calling it self ex: factorial
    anonymous function, short, one-line function: x = lambda a: a * a / print(x(5))
    	filter: list(filter(lambda a: a%2 == 0, lt))
    	map: list(map(lambda a: a * 2, lt))
    	reduce: from functools import reduce / sum = reduce(lambda a, b: a + b, lt)

>> List comprehensation: create new list from existiong list or other iterals
	filtered_ls = [i for i in ls if i%2 == 0 & i > 2]

>>  Array: same data type (1-D) - Simple, basic collections (like lists) for small collections.
    NumPy: N-D - leniar algebra library - numerical calculations for large datasets.
    Pandas: Data analysis library for handling and manipulating structured data, great for dataframes (tables), series.

>> why Python Pandas
    Excel - Can not handle large sets of data
    Python - Need to write code to find answers
    Pandas dataframe: its python modules - makes data scientist life easier and effective

>> Package (folder - collection of modules) and module (file1.py, file2.py, __init__.py ) :
	help organize and reuse of code

1. create folder structure
folder
|
my_package/
├── __init__.py       # Marks this as a package
├── utils.py          # Contains a sample function
setup.py              # Metadata and build instructions
README.md             # Basic documentation

# setup.py file
from setuptools import setup, find_packages
setup(
    name='my_package',
    version='0.1',
    packages=find_packages(),
    install_requires=[],  # Add dependencies here
    author='Your Name',
    description='A custom Python package',
)
2. python setup.py bdist_wheel  --> This will generate a .whl file inside the dist/ directory.
3. activate venv
4. Navigate to the directory: pip install dist/my_package-0.1-py3-none-any.whl     /     pip install . (step 2 not required)

>> libraries: >300k plus libraries - math, random, array, os, shutil, json, csv, datetime, time, re

>> file operation:


=================================================================================================================================

Q&A

>> find student details corresponding to max_marks:    student = [('suresh', 'ong', 85), ('seshu', 'bng', 74), ('naven', 'kk', 40)]
>> Given an array, find the minimum and maximum values:    ans. builtin mtds, sorting, python code
>> Given a string, count the char occurrences of word in a dictionary:    Input: 'aaabbbccddeeeee'
>> Count Vowels from Given words .
>> find line_count, words, chars in the files
>> Write a Python script to count the frequency of characters/words in a text file.  --------> using for loop /from collections import Counter
>> Reversing a String using an Extended Slicing techniques. -------> builtin / slicing / code
>> Find the highest occurrences of each word from string and sort them in order.
>> Remove Duplicates from List. set / for loop / list comprehension 
>> Sort a List without using Sort keyword. built-in / bubble sort /
>> Find the pair of numbers in this list whose sum is n no.
>> Read and print values from an Excel file using Pandas.
>> Handle file exceptions (missing or corrupted Excel files) gracefully. no error in try block --> try - else - finally /// error ---> except - finally
>> Calculate the Intersection of Two Lists without using Built-in Functions:      print(set(ls1) & set(ls2)) or lss =[item for item in ls1 if item in ls2]
>> What is a docstring in Python?  Docstrings are enclosed in triple quotes (""" or ''') and can span multiple lines.
>> What is pass in Python? When is it used? --> Placeholder for future class/function / It does nothing when executed 
>> Which data structure occupies more memory: list or tuple? Why?
	lists generally occupy more memory than tuples. --> their size and contents can change, more methods
	print(sys.getsizeof(list_obj))   # e.g., 120 bytes
>>  Given a list [2, 3, 4, 5, 6], how can you sum all elements? (Discuss available functions)
>>  What is a constructor in Python and its purpose?
	It is special method (__init__) and automatically called to initilize variables when a new instance of a class is created.




===============================================================================================================


