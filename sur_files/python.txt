=============================================================================
Python:
>> Interpreter: The programme that runs your code.
   Virtual Environment: A separate "workspace" that uses a Python interpreter but has its own packages and dependencies.
>> pip - tool for install python packages
   pypi - centralized repository for py packages
>> terminate the python programme  ---> sys.exit()
   execute the file using the specified program or interpreter (#!/usr/bin/python3.5)


>> logging
>> Hiding Passwords and Secret Keys in Environment Variables (linux/mac/Windows) and access them into code -------> os.environ.get("key")

>> with open('sur.log', 'r') as file:
>> Types of Config Files, requests module, unique identifiers (UUIDs)
>> Modules (py file) vs package (collection of modules)
>> Handlling errors: compile time error: Syntatical - missing /Logical error: wrong output 2+3 = 7 /run time error:  5/0.
>>  break / continue / pass

>> 
    functions: reuse block of code / 
    	positional / keyworded / variable length: def sum(a, *b): / keyword variable length: def person(name, **data)
    	Global variable (outside fun) / local variable (inside fun)
    recursion: function calling it self ex: factorial
    anonymous function, short, one-line function: x = lambda a: a * a / print(x(5))
    	filter: list(filter(lambda a: a%2 == 0, lt))
    	map: list(map(lambda a: a * 2, lt))
    	reduce: from functools import reduce / sum = reduce(lambda a, b: a + b, lt)

>> List comprehensation: create new list from existiong list or other iterals
	filtered_ls = [i for i in ls if i%2 == 0 & i > 2]

>> create python packages
    -- package python code as .whl file
    -- setuptools (build and package projects), whell (create & install .whl files), twine (upload packages to pypi)
    -- create code, __init__.py, setup.py 
        python setup.py bdist_wheel - created wheel file
        install whl package

============================================================================================================================================
NumPY and Pandas:

>>  Array: same data type (1-D) - Simple, basic collections (like lists) for small collections.
    NumPy: N-D - leniar algebra library - numerical calculations for large datasets.
    Pandas: Data analysis library for handling and manipulating structured data, great for dataframes (tables), series.

>> why Python Pandas
    Excel - Can not handle large sets of data
    Python - Need to write code to find answers
    Pandas dataframe: its python modules - makes data scientist life easier and effective

=================================================================================================================================

Q&A

>> Given an array, find the minimum and maximum values.
    ans. builtin mtds, sorting, python code

>> Given a string, count the char occurrences of word in a dictionary:
    Input: 'aaabbbccddeeeee'
    Output: { “a” : 3 , “b” : 3, “c” : 2, “d” : 2 , “e” : 5 }

>> Count Vowels from Given words .

3. Write a Python script to count the frequency of characters in a text file.
4. Write a Python program to count the frequency of an word in a text file.
5. Reversing a String using an Extended Slicing techniques. builtin / slicing / code
7. Find the highest occurrences of each word from string and sort them in order.

>> Remove Duplicates from List.
	set / for loop / list comprehension 

>> Sort a List without using Sort keyword.
	built-in / bubble sort /

10. Find the pair of numbers in this list whose sum is n no.

>> Read and print values from an Excel file using Pandas.
    df = pd.read_excel('your_file.xlsx')

>> Handle file exceptions (missing or corrupted Excel files) gracefully. no error in try block --> try - else - finally /// error ---> except - finally
try:
    number = int(input("Enter a number: "))
    result = 10 / number
except ValueError:
    print("You must enter a valid integer.")
except ZeroDivisionError:
    print("You cannot divide by zero.")
else:
    print(f"Result is: {result}")
finally:
    print("Execution completed.")

>> Calculate the Intersection of Two Lists without using Built-in Functions
print(set(ls1) & set(ls2))

lss =[item for item in ls1 if item in ls2]

>> What is a docstring in Python?
    special kind of comment used to document what a function, class, or module does. 
    appears right after the definition of a function, method, class, or module. 
    Docstrings are enclosed in triple quotes (""" or ''') and can span multiple lines.

>> What is pass in Python? When is it used?
    Placeholder for future class/function/loop definition
    It does nothing when executed 

>> Which data structure occupies more memory: list or tuple? Why?
    In Python, lists generally occupy more memory than tuples. 
    This is because lists are mutable, meaning their size and contents can change, while tuples are immutable, meaning their size and contents are fixed once created.

import sys
list_obj = [1, 2, 3, 4, 5]
tuple_obj = (1, 2, 3, 4, 5)
print(sys.getsizeof(list_obj))   # e.g., 120 bytes
print(sys.getsizeof(tuple_obj))  # e.g., 80 bytes

>>  Given a list [2, 3, 4, 5, 6], how can you sum all elements? (Discuss available functions)

>>  What is a constructor in Python and its purpose?
It is special method and automatically called to initilize variables when a new instance of a class is created.

class Car:
    def __init__(self, brand, model):
        self.brand = brand
        self.model = model
# Creating an object
my_car = Car("Toyota", "Camry")
print(my_car.brand)  # Output: Toyota
print(my_car.model)  # Output: Camry



===============================================================================================================


