============================================================================================================================================================
>> BigO
	time complexity: code1 - 15 sec < code2-60sec, means code1 is better than code2 / different machine time varies / so, we measure in terms of no of operations
	Space complexity: code1 15sec but larger space and code2 60sec lesser space, here code2 is better if we concern about space.

>> omega (best case), theta (avg case), omecron (bigO-worst case)	
	O(1) - const oper even n varies
	O(logn) - 2^3 = 8 / log8=3 / divide two parts
	O(n) - for loop
	O(nlogn) - some sorting algortiums
	O(n2) - nested for loop
	for different inputs - O(a+b) - O(a*b)

>> 
============================================================================================================================================================================
Python:
>> Interpreter: The programme that runs your code.
   Virtual Environment: A separate "workspace" that uses a Python interpreter but has its own packages and dependencies.
>> pip - tool for install python packages
   pypi - centralized repository for py packages
>> terminate the python programme  ---> sys.exit()
   execute the file using the specified program or interpreter (#!/usr/bin/python3.5)
>> set path in windows & help('LISTS')
>> variables, lists, tuple, set, dictionory
>> Datatypes: None, Numeric (int, float, bool, complex), sequence(list, tuple, set, range, string), mapping(dictinory)
>> operators: arthematic: +  comparision: ==   logical: and or not   identify: x is y    membership:  x in y  
>> swap variables
>> user input: input / int / eval / python file.py 6(sys.argv[1]) 2 /
>> if elif else / while loop / for loop / for else / break continue pass /
>> why arrays than lists: Optimized/faster, memory efficient for mathematical operations for numerical data.
   Why NumPy: to work with multi-dimensional arrays 
   why Pandas:  handle tabulaer data - data scientist life easier and effective (Python - Need to write code, Excel - Can not handle large data)
>> functions: positional / keyworded / variable length: def sum(a, *b): / keyword variable length: def person(name, **data) /Global variable & local variable  
   recursion: function calling it self ex: factorial using recurssion
   anonymous function, short, one-line function: lambda -- map, filter, reduce
   List comprehensation: create new list from existiong list or other iterals
>> decorator: adding extra feature to the existing function without touching them.
>> Special variable: __name__ == __main__
>> OOPS: Class, object, constructer (__init__), self, variables: instance & class var, metd: instance & class & static mtd,  inner class
   inheritance: single level & multi level & multiple,  constructor in inheritance: super().__init__/mtd | MRO
   polymorphisum: Duck typing, operator overloading, method overloading: NA (achive by a=None), method overriding: child class method overrides parent class mtd 
-- Encaptulation: 
	public variable: can access outside class
	private variable: cannt acces from outside of class
	protected variable: can access from derived class, other not
-- Abstraction

-- Magic/Tunder/double underscore methods: enable you to define the behavour of objects for built-in operations such as arth ope, comp oper, more

>> Hiding Passwords in Environment Variables ---> set SECRET_KEY="my$ecretP@ssw0rd" ---> secret_key = os.environ.get("SECRET_KEY")
>> Config Files --->  config.read('config.ini')  ---> db_host = config['database']['host']  
>> Handlling errors: using the try-except block --> any error in the try block, exception will be raised and it caught by except block
   compile time error: Syntatical, Logical error: wrong output - used * instead of +, run time error:  occur while the program is running --- print(5 / 0)Â  
>> library (group of packages) --> Package (folder - collection of modules) ---> module (file1.py)
>> Why Logging Instead Print: Levels, Output Options, format, Production-Ready.
>> file operations:





	


=================================================================================================================================


